c
params
c!
c
parcel_weight
c
n
c
n
c
n
c
response.body
 post :create, params: { train: train_params }
c
n
c
response.body
c
n
c
response.body
response
post :create, params: { train: train_params }
c
n
nn
n
c
n
c
n
@cost
@cost = cost_service.calculate_cost(@train, @distance)
cost_service = CostService.new(@distance)
n
c
response.body
 get :show, params: { id: 1, distance: 100 }
c
train
c
distance
train
train\
c
distance
train.id
c
response.body
get :show, params: { id: train.id, distance: 100 }
c
response.body
response
c
response.body
response
 post :create, params: { train: train_params, distance: distance, train: train }
c
train_params
post :create, params: { train: train_params, distance: distance, train: train }
n
c
distance
train
c
allow(CostService).to receive(:new).with(distance).and_return(cost_service).controller.instance_variable_set(:@distance, distance)
allow(CostService).to receive(:new).with(distance).and_return(cost_service)controller.instance_variable_set(:@distance, distance)
allow(CostService).to receive(:new).with(distance).and_return(cost_service)
train_params
c
distance
c
n
c
distance
train
c!
c
train
n
train
c!
train
c
distance
@distance = distance
c
allow(CostService).to receive(:new).with(distance).and_return(cost_service)
cost_service
distance
c
@distance
distance
allow(Train).to receive(:new).and_return(instance_double('Train', distance: @distance))
Train
train
c!
train
distance
c
cost_service
train
distance
allow(Train).to receive(:new).and_return(instance_double('Train', distance: @distance))
c
n
distance
@distance
c
cc
n
c
n
cost_service
allow(CostService).to receive(:new).with(distance).and_return(cost_service)
distance
allow(Train).to receive(:new).and_return(instance_double('Train', distance: 50))
Train
c
@distance
distance
distance'
c!
@train
c
n
CostService
cost_service
allow(CostService).to receive(:new).with(distance).and_return(cost_service)
allow(Train).to receive(:new).and_return(instance_double('Train', save: save_status, distance: distance))
Train
c
@distance
distance
c
@distance
c
@train
distance
train
c!
response.body
response
n
FactoryBot.create(:train)
c!
Train.last
Train
train
FactoryBot.create(:train)
post :create, params: {booking: booking, train_id: 1, distance: 50, capacity: 50, train_operator_id: 1, line_id: 1, base_cost_per_unit_distance: 40, additional_cost_factor: 50}
@booking
booking
let(:booking) { FactoryBot.create(:booking)}
@train
train
let(:train) { FactoryBot.create(:train)}
train
train.id
FactoryBot.create(:train)
c!
train_id
train_ud
train.id
@train.id
@train
train
c!
@train
train
c
@distance
cost_service = CostService.new(@distance)
c
n
render_train_response(cost_service)
n
cost_service = CostService.new(@distance)
c
response.body
c
response.body
response
post :create, params: {booking: booking, distance: 50, capacity: 50, train_operator_id: 1, line_id: 1, base_cost_per_unit_distance: 40, additional_cost_factor: 50}
c
response.body
response
c
c!
c
train_line.id
train_line
@train_line
train.id
train
expect(TrainUnavailableWorker).to have_enqueued_sidekiq_job(train.id, @train_line.id).in(:no_wait)
TrainUnavailableWorker
expect(TrainUnavailableWorker).to have_enqueued_sidekiq_job(train.id, @train_line.id).in(:no_wait)
response.body
response
post :create, params: { booking: valid_attributes, train_id: 2, train_line: @train_line , train_line_id: train_line.id }
c!
c
train_line.id
train_line
line.id
train_line
train_line_id
train_line
post :create, params: { booking: valid_attributes, train_id: 2, train_line: @train_line , train_line_id: train_line.id }
c
train_line
@train_line
@train
 @train_line.id
train.id
expect(TrainUnavailableWorker).to have_enqueued_sidekiq_job(train.id, @train_line.id).in(:no_wait)
c
cc
 post :create, params: { booking: valid_attributes, train_id: 2, train_line: 2, train_line_id: train_line.id }
c
train_id
c!
c
train
c
c!
train_line_id
train_id
c
FactoryBot.create(:train)
train
let!(:train) {FactoryBot.create(:train)}
c
FactoryBot.create(:train)
c
FactoryBot.create(:train)
train
 let!(:train) {FactoryBot.create(:train)}
c
train
let(:train) {FactoryBot.create(:train)}
c
train
train_id
c
let(:train) {FactoryBot.create(:train)}
c
n
let(:train) {FactoryBot.create(:train)}
FactoryBot.create(:train)
train
let(:train) {FactoryBot.create(:train)}
c
train
